# Cursor Rules for Modern SaaS Applications

You are an expert in Next.js 15, TypeScript, React, ShadCN/UI, Tailwind CSS, Convex, and Clerk.

## ðŸš¨ CRITICAL CODE QUALITY RULES

### Absolute Prohibitions
- **NEVER use `any` type** - Always use proper TypeScript types or `unknown` with type guards
- **NEVER use `<img>` tags** - Always use Next.js `<Image>` component for performance
- **NEVER disable ESLint rules** without explicit justification in comments
- **NEVER commit code with TypeScript errors** - Fix all type issues before suggesting edits

### Type Safety Requirements
- Always provide explicit types for function parameters and return values
- Use `as const` for readonly arrays and objects
- Prefer `type` for unions, `interface` for object shapes
- Use generic types `<T>` for reusable components and functions
- When importing types, use `import type { ... }` syntax

### Testing Requirements
- Write tests IMMEDIATELY after implementing components/hooks
- Use semantic queries: `getByRole` > `getByLabelText` > `getByText` > `getByTestId`
- Always test error states, loading states, and edge cases
- Mock external dependencies (Clerk, Convex, Next.js) properly

### React/Next.js Requirements
- Use Server Components by default, Client Components only when necessary
- Always use `"use client"` directive at the top of Client Components
- Use Next.js `<Image>` component with proper `alt` attributes
- Implement proper error boundaries and loading states

## Code Style & Quality

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`)
- Structure files with exports at the bottom, following this order:
  1. Imports (external libraries, then internal)
  2. Types and interfaces
  3. Constants and utilities
  4. Main component/function
  5. Exports

## Testing Philosophy & Implementation

### Core Testing Principles
- **Test behavior, not implementation** - Focus on what users see and do
- **User-centric approach** - Use semantic queries that mirror real user interactions
- **Integration over isolation** - Test components working together
- **Accessibility-first** - Queries should promote good UX practices

### When to Write Tests
**ALWAYS write tests when:**
- Creating new components (especially reusable ones)
- Adding new custom hooks
- Implementing form validation logic
- Creating utility functions
- Building critical user workflows
- Adding error handling patterns

**Write tests IMMEDIATELY after:**
- Component implementation is complete
- Custom hook is functional
- Form validation is added
- API integration is working
- User interaction is implemented

### Test File Organization
```
src/
â”œâ”€â”€ __tests__/
â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ ui/           # ShadCN/UI component tests
â”‚   â”‚   â”‚   â”œâ”€â”€ UserProfile.test.tsx
â”‚   â”‚   â”‚   â””â”€â”€ ...
â”‚   â”‚   â”œâ”€â”€ objects/      # Object-related component tests
â”‚   â”‚   â”œâ”€â”€ entries/      # Entry-related component tests
â”‚   â”‚   â””â”€â”€ shared/       # Shared component tests
â”‚   â”œâ”€â”€ hooks/            # Custom hook tests
â”‚   â”œâ”€â”€ lib/              # Utility function tests
â”‚   â””â”€â”€ pages/            # Integration tests
```

### Component Testing Patterns

**Test Structure:**
```typescript
import { render, screen, userEvent } from '@/lib/test-utils'
import { ComponentName } from '@/components/path/to/component'

describe('ComponentName', () => {
  const user = userEvent.setup()
  
  it('should describe expected behavior', async () => {
    // Arrange
    render(<ComponentName prop="value" />)
    
    // Act
    await user.click(screen.getByRole('button', { name: /submit/i }))
    
    // Assert
    expect(screen.getByText(/success/i)).toBeInTheDocument()
  })
})
```

**What to Test in Components:**
- User interactions (clicks, typing, form submissions)
- Conditional rendering based on props/state
- Error states and loading states
- Accessibility attributes and keyboard navigation
- Integration with custom hooks
- Form validation and submission

**Query Priority (use in this order):**
1. `getByRole` - Most accessible, preferred
2. `getByLabelText` - Form elements
3. `getByText` - Content-based queries
4. `getByTestId` - Only when semantic queries aren't possible

### Hook Testing Patterns

**Test Structure:**
```typescript
import { renderHook, act } from '@testing-library/react'
import { useCustomHook } from '@/hooks/use-custom-hook'

describe('useCustomHook', () => {
  it('should handle expected behavior', () => {
    const { result } = renderHook(() => useCustomHook())
    
    act(() => {
      result.current.someFunction()
    })
    
    expect(result.current.someValue).toBe(expectedValue)
  })
})
```

**What to Test in Hooks:**
- State management logic
- Side effects (API calls, localStorage)
- Error handling and recovery
- Return value consistency
- Dependencies and cleanup

### Form Testing Patterns

**Always test:**
- Field validation (required, format, length)
- Error message display
- Successful submission
- Loading states during submission
- Accessibility of form elements

```typescript
it('should validate required fields', async () => {
  render(<MyForm onSubmit={mockSubmit} />)
  
  await user.click(screen.getByRole('button', { name: /submit/i }))
  
  expect(screen.getByText(/field is required/i)).toBeInTheDocument()
  expect(mockSubmit).not.toHaveBeenCalled()
})
```

### Mock Patterns

**Convex Mocking:**
```typescript
import { useQuery, useMutation } from 'convex/react'

const mockUseQuery = useQuery as jest.MockedFunction<typeof useQuery>
const mockUseMutation = useMutation as jest.MockedFunction<typeof useMutation>

beforeEach(() => {
  mockUseQuery.mockReturnValue(mockData)
  mockUseMutation.mockReturnValue(jest.fn())
})
```

**Component Props Mocking:**
```typescript
const defaultProps = {
  onSubmit: jest.fn(),
  isLoading: false,
  error: null,
}
```

### E2E Testing Guidelines

**Critical paths to test:**
- User authentication flow
- Object creation and management
- Entry creation and editing
- Navigation between pages
- Error handling scenarios

**E2E Test Structure:**
```typescript
import { test, expect } from '@playwright/test'

test.describe('Feature Name', () => {
  test('should complete user journey', async ({ page }) => {
    await page.goto('/dashboard')
    
    await page.click('[data-testid="create-button"]')
    await page.fill('[name="title"]', 'Test Title')
    await page.click('[type="submit"]')
    
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible()
  })
})
```

### Test Data Helpers

**Use the provided helpers in test-utils.tsx:**
```typescript
import { createMockUser, createMockObject, createMockEntry } from '@/lib/test-utils'

const user = createMockUser({ firstName: 'Custom Name' })
const object = createMockObject({ name: 'Test Object' })
```

### Testing Commands

**Development workflow:**
```bash
npm run test:watch    # Use while developing
npm run test         # Run before commits
npm run test:coverage # Check coverage periodically
```

### Coverage Expectations

**Minimum coverage targets:**
- Components: 80%+
- Hooks: 90%+
- Utilities: 95%+
- Critical paths: 100%

**Focus areas for high coverage:**
- Form validation logic
- Error handling
- User authentication flows
- Data transformation utilities
- State management hooks

### Test Naming Conventions

```typescript
// Component tests
describe('ComponentName', () => {
  it('should render with correct props', () => {})
  it('should handle user interaction', async () => {})
  it('should display error state', () => {})
  it('should be accessible', () => {})
})

// Hook tests  
describe('useHookName', () => {
  it('should return initial state', () => {})
  it('should update state on action', () => {})
  it('should handle error cases', () => {})
})
```

### Integration with Development

**When creating components, ALWAYS:**
1. Add `data-testid` attributes for complex interactions
2. Use semantic HTML for better testability
3. Ensure keyboard navigation works
4. Test error and loading states
5. Write tests immediately after implementation

**When adding features:**
1. Write component tests first (TDD when possible)
2. Test the happy path
3. Test error scenarios
4. Test edge cases
5. Verify accessibility

Remember: Tests are living documentation of your component's behavior. Write them as if explaining to a new developer how the component should work.

## Documentation Standards

- Always maintain clear, up-to-date documentation for architectural decisions
- Document the "why" behind complex business logic, not just the "what"
- Use TypeScript interfaces as living documentation for data structures
- When adding new features, update relevant documentation files:
  - `docs/technical-specs.md` for feature requirements
  - `docs/decision-log.md` for architectural choices
  - `README.md` for setup or usage changes
  - `docs/current-status.md` for active work and next steps
- Comment complex algorithms and business rules with explanations
- Use JSDoc for non-obvious component props and function parameters
- Keep documentation concise but complete - focus on developer understanding

## Current Status Management

- Always check `docs/current-status.md` when starting work to understand current context
- Update the current status document when completing significant work or encountering blockers
- Include immediate next steps (2-3 concrete actions) for easy project re-entry
- Document any complications, workarounds, or important context that future developers need
- Note open questions or decisions that need to be made
- Track which development phase the project is currently in

## Decision Documentation

When making architectural decisions, always document:
- **Problem**: What challenge are we solving?
- **Options**: What alternatives were considered?
- **Decision**: What was chosen and why?
- **Consequences**: What are the trade-offs and implications?

Update the decision log immediately when making significant choices about:
- Technology selection
- Database schema changes
- Component architecture patterns
- Authentication flows
- Performance optimizations

## TypeScript Standards

- Use TypeScript strict mode configuration
- Define proper interfaces for all props and data structures
- Use `const` assertions for objects that shouldn't change
- Prefer `type` for unions, `interface` for object shapes
- Use generic types when building reusable components
- Avoid `any` types; use proper typing or `unknown` if needed

## React & Next.js 15 App Router

- Use Server Components by default; only use Client Components when necessary
- Mark Client Components with `"use client"` directive at the top
- Use Next.js App Router file-based routing with route groups
- Implement proper loading.tsx and error.tsx files
- Use Next.js Image component for optimized images
- Follow the established route group pattern:
  - `(marketing)` for public pages
  - `(authenticated)` for protected app pages
- Use middleware.ts for route protection and authentication

## Component Architecture

- Create reusable components in appropriate directories:
  - `src/components/ui/` for ShadCN/UI base components
  - `src/components/layout/` for app shell components
  - `src/components/[domain]/` for feature-specific components
  - `src/components/shared/` for reusable business components
- Use compound component patterns for complex UI elements
- Implement proper error boundaries and loading states
- Use React.forwardRef for components that need ref forwarding

## ShadCN/UI & Styling

- Use ShadCN/UI components as the foundation; customize with className prop
- Use Tailwind CSS utility classes; avoid custom CSS when possible
- Follow mobile-first responsive design principles
- Use CSS variables for theme consistency (defined in globals.css)
- Implement proper hover states, focus states, and transitions
- Use `cn()` utility function for conditional className logic

## Form Handling

- Use React Hook Form with Zod validation for all forms
- Create Zod schemas in `src/lib/validations.ts`
- Implement proper error handling and display
- Use ShadCN/UI Form components for consistent styling
- Handle loading states during form submission
- Provide clear success/error feedback to users

## Database & API (Convex)

- Define schemas in `convex/schema.ts` with proper indexes
- Include `userId` field in all user-scoped tables
- Use `_creationTime` and `updatedAt` timestamps
- Implement soft deletes with `isArchived` boolean
- Use proper Convex query and mutation patterns
- Handle loading and error states in components consuming Convex data

## Authentication (Clerk)

- Wrap root layout with ClerkProvider
- Use middleware for route protection
- Implement branded sign-in/sign-up pages
- Use UserButton component in app header
- Handle unauthenticated states gracefully
- Redirect properly after authentication

## File Naming & Organization

- Use kebab-case for file and folder names
- Use PascalCase for component files (e.g., `UserProfile.tsx`)
- Use camelCase for utility files (e.g., `formatDate.ts`)
- Group related files in feature-based folders
- Keep page files minimal; move logic to components

## UI/UX Patterns

- Implement empty states with clear CTAs and helpful examples
- Use skeleton loading states for better perceived performance
- Show loading spinners for actions that take time
- Implement proper error handling with user-friendly messages
- Use consistent spacing and typography scale
- Implement hover effects and micro-interactions
- Ensure all interactive elements have proper focus states

## Data Patterns

- Use optimistic updates for better user experience
- Implement proper pagination for lists
- Use debounced search inputs
- Cache frequently accessed data appropriately
- Handle offline states gracefully

## Error Handling

- Use error boundaries for component-level error handling
- Implement proper try/catch blocks in async functions
- Show user-friendly error messages
- Log errors appropriately for debugging
- Provide fallback UI for failed components

## Performance

- Use React.memo() for expensive re-renders
- Implement proper code splitting with Next.js dynamic imports
- Optimize images with Next.js Image component
- Use React.Suspense for component lazy loading
- Minimize bundle size by importing only needed utilities

## Development Workflow

- Use concurrent development servers (Convex + Next.js)
- Follow git commit message conventions
- Use proper ESLint configuration
- Format code consistently with Prettier
- Use TypeScript strict mode

## Security

- Sanitize user inputs
- Use proper authentication checks
- Implement CSRF protection
- Validate data on both client and server
- Use environment variables for sensitive configuration

## Accessibility

- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation works
- Use sufficient color contrast
- Provide alt text for images
- Support screen readers

Remember: Focus on creating maintainable, scalable, and performant applications that follow modern React and Next.js best practices. Always prioritize clear documentation and architectural decision tracking to maintain project clarity and enable effective collaboration. 
